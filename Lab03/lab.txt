Exercise 3.1
a. Which algorithms work (in a timely manner) and which don’t? Explain your results in terms of the capabilities (and implementations) of the algorithms and nature of the problems.

Depth-first graph search and Min conflicts don’t work. DFS doesn’t work at all problems. It is due to its characteristic that it tries to reach one path’s deepest endpoint first and to search other paths. For that reason, it is not efficient to solve sudoku problem and gets fail since every time it searches end of paths although those paths are not the goal. 
AC3 succeeded in the easy problem but failed in the harder and hardest problems. AC3 connects two variables to head and tail to create an arc and compares it for consistency without violation. In the Easy problem, the comparison of these two variables was clear, so it could solve the problem quickly. However, in harder which doesn’t give many hints, it failed because it is difficult to compare the consistency of two variables with an arc. Moreover, AC3 checks its consistency as a pair, so it doesn’t guaranty to check every failer. 
Min-Conflicts always failed. It attempts to solve the problem through a randomly selected initial state in the defined steps and to select less violated value. This method is not suitable for the sudoku problem, which has many variables and many values in a domain, and the selection doesn’t guaranty to approach the goal in a most time. 
The backtracking search was slow but could solve the problems. Backtracking search checks one variable at a time. This checks the variable and calculates if there is no violation with previous variables and maintains consistency. So it requires a constant time to check, but it can get closer to the goal gradually. This approach is suitable for solving the sudoku problem because it identifies potential domain values one by one in a variable to compare with other variables.

b. What effect does configuring the settings for backtracking have on the results?
Which, if any, of these settings, should work best for sudoku? What combination of settings actually works the best?

These two settings serve as filtering and ordering, respectively. MRV selects the variable which has the smallest value in the domain. This choice gives a positive effect because it makes the variable consistent and if the choice is invalid, it will lead to failure faster so that it can move to different direction faster. Forward checking is filtering which removes violated values in other variables when each variable’s value is selected. Forward checking repeats this way, and if it is wrong, it forwards and selects another value in another domain.

Exercise 3.2
a. How large can n get for each of the algorithms? Why?

DFS and AC3 always failed. I think the reasons why these algorithms failed are the same as the reason explained in sudoku. The backtracking search increased the total time as n increased (n = 25 took1.69, n = 26 took 14.99, and n = 29 took 115.25) and did not show the result when n> 29. The reason for this result is that as n increases, the number of backtracking increases and its limit is 29.  Min-Conflicts could solve most n-queens problems. This is because, unlike the sudoku problem, it is appropriate to select the random initial state and the less violate value in the n-queens problem.

b. What backtracking settings work the best? Why?

I think that setting the forward checking as filtering and MRV as ordering is the best. Backtracking with the forward checking and MRV was 350 times faster than the default setting. The reason is that the violated values in the domain are removed through filtering and the variables that have the lowest values in the domain are checked first through ordering. This process can reduce unnecessary steps.

c. How many steps does Min-Conflicts require to do its work?

The max steps are 100000. Depending on the selection, it may have 0 steps or sometimes fail to reach max steps. The results of the steps I took when I tried 12 were 0, 3, 80, 0, 38, 24, 71, 112, 193, and failed two times. This is because min-conflicts, the hill climbing base, do not guarantee success. Therefore, in some cases, if the randomly selected value is not suitable, it has a possibility to get fail.

Exercise 3.3
a. Compare and contrast the specifications for CSP (i.e., csp.CSP) and traditional problems (i.e., search.Problem). Be sure to consider the nature of states, domains, actions, results and goal tests.

CSP and traditional problems approach a problem differently. In traditional problems, a path is important, so it compares cost or depth. Thus, it follows the heuristics that provide specific guidance. However, it is important for CSP to reach a goal rather than a path. Therefore, it defines the states through variables and domain values, identifies the problem and performs a goal test.

b. Compare and contrast the nature of the heuristics deployed in traditional and constraint-based problem solving.

In the heuristics of the traditional search problem, randomly selected data is a state. Therefore, the goal test is arbitrarily determined according to the determined state. However, the state of constraint-based problem solving is determined by variables and values in the domain. The goal test is also adjusted and controlled through the values of the variables.

